generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model liquidations {
  id                       BigInt   @id @default(autoincrement())
  inserted_at              DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at               DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash         String
  block_number             Int
  pool_address             String
  collateral_token_address String
  collateral_amount        String
  usd_value                Float
}

model lp_deposit_withdraw_token_entries {
  id                   BigInt               @id @default(autoincrement())
  inserted_at          DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at           DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash     String
  block_number         Int
  event_id             BigInt
  token_address        String
  amount               String
  lp_deposit_withdraws lp_deposit_withdraws @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lp_deposit_withdraw")
  tokens               tokens               @relation(fields: [token_address], references: [contract_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_lp_deposit_withdraw_token_entries_token_address")
}

model lp_deposit_withdraws {
  id                                BigInt                              @id @default(autoincrement())
  inserted_at                       DateTime                            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at                        DateTime                            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash                  String
  block_number                      Int
  usd_value                         Float
  lp_deposit_withdraw_token_entries lp_deposit_withdraw_token_entries[]
}

model mev_transaction_entries {
  id                                                        BigInt   @id @default(autoincrement())
  inserted_at                                               DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at                                                DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_index                                         Int
  from_token_address                                        String
  to_token_address                                          String
  from_amount                                               String
  to_amount                                                 String
  usd_value                                                 Float
  tokens_mev_transaction_entries_from_token_addressTotokens tokens   @relation("mev_transaction_entries_from_token_addressTotokens", fields: [from_token_address], references: [contract_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_mev_transaction_entries_from_token_address")
  tokens_mev_transaction_entries_to_token_addressTotokens   tokens   @relation("mev_transaction_entries_to_token_addressTotokens", fields: [to_token_address], references: [contract_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_mev_transaction_entries_to_token_address")
}

model mev_transactions {
  id               BigInt   @id @default(autoincrement())
  inserted_at      DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at       DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  block_number     Int
  transaction_hash String
}

model nft_liquidations {
  id                    BigInt   @id @default(autoincrement())
  inserted_at           DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at            DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash      String
  block_number          Int
  pool_contract_address String
  nft_contract_address  String
  nft_name              String
  nft_revision          Int
  floor_usd_value       Float
}

model nft_price_move {
  id                     BigInt   @id @default(autoincrement())
  inserted_at            DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at             DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash       String
  block_number           Int
  contract_address       String
  before_floor_usd_value Float
  after_floor_usd_value  Float
  nft_name               String
  nft_revision           Int
}

model swap_pool_creations {
  id               BigInt   @id @default(autoincrement())
  inserted_at      DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at       DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash String
  block_number     Int
  token_address1   String
  token_address2   String
}

model tokens {
  contract_address                                                           String                              @id
  inserted_at                                                                DateTime                            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at                                                                 DateTime                            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name                                                                       String
  symbol                                                                     String
  decimals                                                                   Int
  erc20_swaps_erc20_swaps_from_token_addressTotokens                         erc20_swaps[]                       @relation("erc20_swaps_from_token_addressTotokens")
  erc20_swaps_erc20_swaps_to_token_addressTotokens                           erc20_swaps[]                       @relation("erc20_swaps_to_token_addressTotokens")
  lp_deposit_withdraw_token_entries                                          lp_deposit_withdraw_token_entries[]
  mev_transaction_entries_mev_transaction_entries_from_token_addressTotokens mev_transaction_entries[]           @relation("mev_transaction_entries_from_token_addressTotokens")
  mev_transaction_entries_mev_transaction_entries_to_token_addressTotokens   mev_transaction_entries[]           @relation("mev_transaction_entries_to_token_addressTotokens")
}

model transfers {
  id               BigInt   @id @default(autoincrement())
  inserted_at      DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at       DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash String
  block_number     Int
  amount           String
  token_address    String
  from_address     String
  to_address       String
}

model erc20_swaps {
  id                                            BigInt   @id @default(autoincrement())
  inserted_at                                   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at                                    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash                              String
  block_number                                  Int
  from_token_address                            String
  to_token_address                              String
  from_amount                                   String
  to_amount                                     String
  usd_value                                     Float
  tokens_erc20_swaps_from_token_addressTotokens tokens   @relation("erc20_swaps_from_token_addressTotokens", fields: [from_token_address], references: [contract_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_erc20_swaps_from_token_address")
  tokens_erc20_swaps_to_token_addressTotokens   tokens   @relation("erc20_swaps_to_token_addressTotokens", fields: [to_token_address], references: [contract_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_erc20_swaps_to_token_address")
}

model nft_trades {
  id               BigInt   @id @default(autoincrement())
  inserted_at      DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at       DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  transaction_hash String
  block_number     Int
  from_address     String
  to_address       String
  contract_address String
  nft_name         String
  nft_symbol       String
  nft_token_id     String
  price_eth        Float
}
